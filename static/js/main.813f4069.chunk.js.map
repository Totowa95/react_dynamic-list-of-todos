{"version":3,"sources":["api/todos.js","components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["BASE_URL","userFromServer","userId","fetch","then","response","json","result","data","TodoList","state","showTodos","serchByTitle","chooseTodos","selectBy","arr","newArr","filter","item","title","includes","completed","this","props","todos","takeUserId","newTodos","className","type","value","placeholder","onChange","target","setState","trimLeft","name","map","classNames","TodoList__item","key","id","checked","readOnly","onClick","React","Component","CurrentUser","selectedUser","prevProps","clear","email","phone","App","selectedUserId","currentUserId","clearUserinfo","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.813f4069.chunk.js","sourcesContent":["const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const todosPromis = () => fetch(`${BASE_URL}/todos`)\n  .then(response => response.json())\n  .then(result => result.data);\n\nexport const userFromServer = userId => fetch(`${BASE_URL}/users/${userId}`)\n  .then(response => response.json())\n  .then(result => result.data);\n","import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport './TodoList.scss';\n\nexport class TodoList extends React.Component {\n  state = {\n    showTodos: 'all',\n    serchByTitle: '',\n  }\n\n  chooseTodos = (selectBy, arr) => {\n    const { serchByTitle } = this.state;\n    const newArr = arr.filter(item => item.title.includes(serchByTitle));\n\n    if (selectBy === 'active') {\n      return newArr.filter(item => !item.completed);\n    }\n\n    if (selectBy === 'completed') {\n      return newArr.filter(item => item.completed);\n    }\n\n    return newArr;\n  }\n\n  render() {\n    const { todos, takeUserId } = this.props;\n    const { serchByTitle, showTodos } = this.state;\n    const newTodos = this.chooseTodos(showTodos, todos);\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <input\n          type=\"text\"\n          value={serchByTitle}\n          placeholder=\"Search todo\"\n          onChange={({ target }) => (\n            this.setState({ serchByTitle: target.value.trimLeft() })\n          )}\n        />\n\n        <select\n          name=\"showTodos\"\n          value={showTodos}\n          onChange={({ target }) => this.setState({ showTodos: target.value })}\n        >\n          <option value=\"all\">all</option>\n          <option value=\"active\">active</option>\n          <option value=\"completed\">completed</option>\n        </select>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {newTodos.map(item => (\n              <li\n                className={classNames({\n                  TodoList__item: true,\n                  'TodoList__item--checked': item.completed,\n                  'TodoList__item--unchecked': !item.completed,\n                })}\n                key={item.id}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={item.completed}\n                    readOnly\n                  />\n                  <p>{item.title}</p>\n                </label>\n\n                <button\n                  className=\"\n                    TodoList__user-button\n                    TodoList__user-button--selected\n                    button\n                  \"\n                  type=\"button\"\n                  onClick={() => takeUserId(item.userId)}\n                >\n                  {`User #${item.userId}`}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.object.isRequired,\n  ).isRequired,\n  takeUserId: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './CurrentUser.scss';\nimport { userFromServer } from '../../api/todos';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    selectedUser: {},\n  }\n\n  componentDidMount() {\n    const { userId } = this.props;\n\n    userFromServer(userId)\n      .then(result => this.setState({\n        selectedUser: result,\n      }));\n  }\n\n  componentDidUpdate(prevProps) {\n    const { userId } = this.props;\n\n    if (prevProps.userId === userId) {\n      return;\n    }\n\n    userFromServer(userId)\n      .then(result => this.setState({\n        selectedUser: result,\n      }));\n  }\n\n  render() {\n    const { userId, clear } = this.props;\n    const { selectedUser } = this.state;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>{`Selected user: ${userId}`}</span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{selectedUser.name}</h3>\n        <p className=\"CurrentUser__email\">{selectedUser.email}</p>\n        <p className=\"CurrentUser__phone\">{selectedUser.phone}</p>\n        <button\n          type=\"button\"\n          onClick={() => clear()}\n          className=\"CurrentUser__button\"\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clear: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { todosPromis } from './api/todos';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n    selectedUser: {},\n  };\n\n  componentDidMount() {\n    todosPromis()\n      .then(todos => (\n        this.setState({\n          todos: todos.filter(item => (item.title && item.userId)),\n        })\n      ));\n  }\n\n  currentUserId = (userId) => {\n    this.setState({ selectedUserId: userId });\n  };\n\n  clearUserinfo = () => {\n    this.setState({\n      selectedUserId: 0,\n      selectedUser: {},\n    });\n  };\n\n  render() {\n    const { todos, selectedUserId, selectedUser } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            takeUserId={this.currentUserId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                user={selectedUser}\n                userId={selectedUserId}\n                clear={this.clearUserinfo}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}